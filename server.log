
> penguinjs@0.0.0 dev
> turbo dev

turbo 2.5.4

• Packages in scope: @penguinjs/config-eslint, @penguinjs/config-typescript, @penguinjs/game-engine, @penguinjs/playground, @penguinjs/ui, @penguinjs/utils
• Running dev in 6 packages
• Remote caching disabled
@penguinjs/playground:dev: cache bypass, force executing 319b625eb390dfd6
@penguinjs/game-engine:dev: cache bypass, force executing eb08c744e36a3dce
@penguinjs/ui:dev: cache bypass, force executing e3cb3983f5eb9502
@penguinjs/utils:dev: cache bypass, force executing e00046a43f23d088
@penguinjs/playground:dev: 
@penguinjs/playground:dev: > @penguinjs/playground@0.1.0 dev /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground
@penguinjs/playground:dev: > next dev -p 4000
@penguinjs/playground:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: > @penguinjs/game-engine@0.0.0 dev /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/packages/game-engine
@penguinjs/game-engine:dev: > tsc --watch
@penguinjs/game-engine:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: > @penguinjs/ui@0.0.0 dev /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/packages/ui
@penguinjs/ui:dev: > tsc --watch
@penguinjs/ui:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: > @penguinjs/utils@0.0.0 dev /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/packages/utils
@penguinjs/utils:dev: > tsc --watch
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 4:46:04 - Starting compilation in watch mode...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 4:46:04 - Starting compilation in watch mode...
@penguinjs/utils:dev: 
@penguinjs/ui:dev: [2J[3J[H오후 4:46:04 - Starting compilation in watch mode...
@penguinjs/ui:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 4:46:05 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 4:46:05 - Found 0 errors. Watching for file changes.
@penguinjs/playground:dev:    ▲ Next.js 15.3.2
@penguinjs/playground:dev:    - Local:        http://localhost:4000
@penguinjs/playground:dev:    - Network:      http://10.100.33.42:4000
@penguinjs/playground:dev:    - Environments: .env.local
@penguinjs/playground:dev: 
@penguinjs/playground:dev:  ✓ Starting...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 4:46:05 - Found 0 errors. Watching for file changes.
@penguinjs/playground:dev:  ✓ Ready in 1274ms
@penguinjs/playground:dev:  ✓ Compiled /middleware in 121ms (137 modules)
@penguinjs/playground:dev:  ○ Compiling /[locale]/games/callstack-library ...
@penguinjs/playground:dev:  ✓ Compiled /[locale]/games/callstack-l@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:38 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:39 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:39 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:39 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:39 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/ui:dev: [2J[3J[H오전 8:59:41 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:44 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:44 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:45 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:46 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:47 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오전 8:59:48 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:48 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:49 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:49 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:49 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:50 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:50 - Found 1 error. Watching for file changes.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:51 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:52 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:55 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:56 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:56 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:56 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:56 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:58 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:58 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 9:00:10 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:11 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 9:00:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:23 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:19 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:20 - Found 2 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/ui:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:22 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:23 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:23 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:23 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:24 - Found 5 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:25 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:25 - Found 8 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:29 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/LanguageToggle.tsx(2,40): error TS7016: Could not find a declaration file for module 'next/navigation'. '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/navigation.js' implicitly has an 'any' type.
@penguinjs/ui:dev:   Try `npm i --save-dev @types/next` if it exists or add a new declaration (.d.ts) file containing `declare module 'next/navigation';`
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:29 - Found 9 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:32 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: src/store.ts(1,24): error TS2307: Cannot find module 'zustand' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(2,25): error TS2307: Cannot find module 'zustand/middleware' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(18,6): error TS7006: Parameter 'set' implicitly has an 'any' type.
@penguinjs/game-engine:dev: src/store.ts(18,11): error TS7006: Parameter 'get' implicitly has an 'any' type.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:32 - Found 4 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:34 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:34 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:35 - Found 13 errors. Watching for file changes.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.es2020.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.webworker.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.webworker.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:36 - Found 14 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:52 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'node'
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'react'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'react'
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:52 - Found 14 errors. Watching for file changes.
    difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 1110ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 59ms
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 18ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 46ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 35ms
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 17ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 26ms
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 19ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 45ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 46ms
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 30ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 51ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 32ms
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 21ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 47ms
@penguinjs/playground:dev:  ✓ Compiled in 483ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 66ms
@penguinjs/playground:dev:  ✓ Compiled in 297ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 52ms
@penguinjs/playground:dev:  ✓ Compiled in 274ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 35ms
@penguinjs/playground:dev:  ✓ Compiled in 254ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 40ms
@penguinjs/playground:dev:  ✓ Compiled in 201ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 54ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 153ms
@penguinjs/playground:dev:  ✓ Compiled /_not-found in 353ms (1877 modules)
@penguinjs/playground:dev:  GET /ko/.well-known/appspecific/com.chrome.devtools.json 404 in 409ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 371ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 611ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 63ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 35ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 47ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 59ms
@penguinjs/playground:dev:  ✓ Compiled in 253ms (895 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 12ms
@penguinjs/playground:dev:  ✓ Compiled in 329ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 63ms
@penguinjs/playground:dev:  ✓ Compiled in 130ms (895 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 14ms
@penguinjs/playground:dev:  ✓ Compiled in 135ms (895 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 20ms
@penguinjs/playground:dev:  ✓ Compiled in 598ms (1887 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 56ms
@penguinjs/playground:dev:  ✓ Compiled in 417ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 39ms
@penguinjs/playground:dev:  ✓ Compiled in 368ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 38ms
@penguinjs/playground:dev:  ✓ Compiled in 367ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 40ms
@penguinjs/playground:dev:  ✓ Compiled in 259ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 37ms
@penguinjs/playground:dev:  ✓ Compiled in 221ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 59ms
@penguinjs/playground:dev:  ✓ Compiled in 252ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 54ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 166ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 293ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 507ms
@penguinjs/playground:dev:  ✓ Compiled in 393ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 279ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 243ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 203ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 257ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 200ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 171ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 255ms (1889 modules)
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 271ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 336ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 542ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 71ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 44ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 26ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 35ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 27ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 21ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 31ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 51ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 29ms
@penguinjs/playground:dev:  ✓ Compiled in 513ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 46ms
@penguinjs/playground:dev:  ✓ Compiled in 324ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 47ms
@penguinjs/playground:dev:  ✓ Compiled in 619ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 57ms
@penguinjs/playground:dev:  ✓ Compiled in 349ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 40ms
@penguinjs/playground:dev:  ✓ Compiled in 227ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 83ms
@penguinjs/playground:dev:  ✓ Compiled in 490ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 43ms
@penguinjs/playground:dev:  ✓ Compiled in 255ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 43ms
@penguinjs/playground:dev:  ✓ Compiled in 494ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 57ms
@penguinjs/playground:dev:  ✓ Compiled in 440ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 55ms
@penguinjs/playground:dev:  ✓ Compiled in 251ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 47ms
@penguinjs/playground:dev:  ⨯ ./src/games/callstack-library/CallStackLibraryGame.tsx
@penguinjs/playground:dev: Error:   [31mx[0m Expected ',', got 'useEffect'
@penguinjs/playground:dev:      ,-[[36;1;4m/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/src/games/callstack-library/CallStackLibraryGame.tsx[0m:312:1]
@penguinjs/playground:dev:  [2m309[0m |   }
@penguinjs/playground:dev:  [2m310[0m |   
@penguinjs/playground:dev:  [2m311[0m |   // 컴포넌트 마운트 확인
@penguinjs/playground:dev:  [2m312[0m |   useEffect(() => {
@penguinjs/playground:dev:      : [35;1m  ^^^^^^^^^[0m
@penguinjs/playground:dev:  [2m313[0m |     setMounted(true)
@penguinjs/playground:dev:  [2m314[0m |   }, [])
@penguinjs/playground:dev:      `----
@penguinjs/playground:dev: 
@penguinjs/playground:dev: Caused by:
@penguinjs/playground:dev:     Syntax Error
@penguinjs/playground:dev: 
@penguinjs/playground:dev: Import trace for requested module:
@penguinjs/playground:dev: ./src/games/callstack-library/CallStackLibraryGame.tsx
@penguinjs/playground:dev: ./src/games/callstack-library/index.ts
@penguinjs/playground:dev: ./src/lib/games.ts
@penguinjs/playground:dev: ./app/[locale]/page.tsx
@penguinjs/playground:dev:  ✓ Compiled in 576ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 83ms
@penguinjs/playground:dev:  ⚠ Fast Refresh had to perform a full reload. Read more: https://nextjs.org/docs/messages/fast-refresh-reload
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 168ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 264ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 477ms
@penguinjs/playground:dev:  ✓ Compiled in 314ms (1943 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 83ms
@penguinjs/playground:dev:  ✓ Compiled in 298ms (1943 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 57ms
@penguinjs/playground:dev:  ✓ Compiled in 357ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 61ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 177ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 206ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 377ms
@penguinjs/playground:dev:  ✓ Compiled in 429ms (1943 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 50ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 117ms
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 62ms
@penguinjs/playground:dev:  ✓ Compiled in 299ms (1943 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 45ms
@penguinjs/playground:dev:  ✓ Compiled in 513ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 44ms
@penguinjs/playground:dev:  ✓ Compiled in 262ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 53ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 177ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 190ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 400ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 83ms
@penguinjs/playground:dev:  GET /favicon.ico 200 in 44ms
@penguinjs/playground:dev:  ✓ Compiled in 438ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 44ms
@penguinjs/playground:dev:  ✓ Compiled in 473ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 43ms
@penguinjs/playground:dev:  ✓ Compiled in 290ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 59ms
@penguinjs/playground:dev:  ✓ Compiled in 361ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 59ms
@penguinjs/playground:dev:  ✓ Compiled in 490ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 40ms
@penguinjs/playground:dev:  ✓ Compiled in 318ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 52ms
@penguinjs/playground:dev:  ✓ Compiled in 223ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 47ms
@penguinjs/playground:dev:  ✓ Compiled in 453ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 41ms
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 219ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 329ms (1047 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 544ms
@penguinjs/playground:dev:  ✓ Compiled in 508ms (1889 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 45ms
@penguinjs/playground:dev:  ✓ Compiled in 462ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 192ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 112ms (896 modules)
@penguinjs/playground:dev:  ✓ Compiled in 323ms (1889 modules)
@penguinjs/playground:dev:  ✓ Compiled in 129ms (896 modules)
@penguinjs/playground:dev:  ✓ Compiled in 200ms (1889 modules)
@penguinjs/playground:dev:  ⨯ [Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/next-font-manifest.json'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'open',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/next-font-manifest.json',
@penguinjs/playground:dev:   page: '/ko/games/callstack-library'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ✓ Compiled /_error in 470ms (2209 modules)
@penguinjs/playground:dev:  GET /ko/games/callstack-library 500 in 944ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 256ms (1134 modules)
@penguinjs/playground:dev: Loading levels - beginnerLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:     description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:     objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '함수 내부에서 보물 값을 반환해보세요',
@penguinjs/playground:dev:       'return "💎" 을 사용해보세요',
@penguinjs/playground:dev:       '함수는 값을 반환할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '간단한 클로저 만들기',
@penguinjs/playground:dev:     description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:       '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createTreasureHunter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '내부 함수에서 외부 변수 treasure에 접근해보세요',
@penguinjs/playground:dev:       'function 키워드로 내부 함수를 만들고 반환하세요',
@penguinjs/playground:dev:       '내부 함수: return function() { return treasure; }'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '외부 변수 접근하기',
@penguinjs/playground:dev:     description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:       '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createMemory;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '매개변수 item을 사용하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       'return function() { return item; }',
@penguinjs/playground:dev:       '클로저는 외부 함수의 매개변수도 기억합니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '카운터 클로저 구현',
@penguinjs/playground:dev:     description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:       '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createCounter;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'let count = 0; 으로 시작하세요',
@penguinjs/playground:dev:       'return function() { return ++count; }',
@penguinjs/playground:dev:       '클로저는 변수의 상태를 유지할 수 있습니다'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:     difficulty: 'beginner',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '클로저로 데이터 보호',
@penguinjs/playground:dev:     description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:     objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:       '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'return createVault;',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '객체에 메서드를 담아 반환하세요: { getSecret: function() {...} }',
@penguinjs/playground:dev:       'secret 변수는 외부에서 직접 접근할 수 없어야 합니다',
@penguinjs/playground:dev:       'return { getSecret: function() { return secret; } };'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - intermediateLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:     description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:       "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function middle() {\n' +
@penguinjs/playground:dev:       '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    function inner() {\n' +
@penguinjs/playground:dev:       '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return inner();\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return middle();\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'outer();',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '렉시컬 스코프는 함수가 정의된 위치에 따라 결정됩니다.',
@penguinjs/playground:dev:       'inner 함수에서 outer 함수의 secret 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'return secret; 을 사용하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '클로저와 반복문',
@penguinjs/playground:dev:     description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:       '  const functions = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:       '    functions.push(function() {\n' +
@penguinjs/playground:dev:       '      return i;\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return functions;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:       'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'var는 함수 스코프를 가지므로 모든 클로저가 같은 i를 참조합니다.',
@penguinjs/playground:dev:       'let을 사용하면 블록 스코프가 생성됩니다.',
@penguinjs/playground:dev:       'IIFE(즉시 실행 함수)를 사용하여 현재 i 값을 캡처할 수 있습니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '모듈 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:       "  let password = '1234';\n" +
@penguinjs/playground:dev:       '  let locked = true;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:       '    isLocked: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:       '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const safe = createSafe();\n' +
@penguinjs/playground:dev:       "safe.unlock('1234');",
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '프라이빗 변수 password와 locked는 외부에서 직접 접근할 수 없습니다.',
@penguinjs/playground:dev:       '반환된 객체의 메서드들만 이 변수들에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'unlock 메서드에서 비밀번호를 확인하고 locked를 false로 설정하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:     description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:       "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:       '  const handlers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:       '    const handler = function() {\n' +
@penguinjs/playground:dev:       "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:       '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    handlers.push(handler);\n' +
@penguinjs/playground:dev:       "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:       '  });\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    handlers: handlers,\n' +
@penguinjs/playground:dev:       '    cleanup: function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '각 이벤트 핸들러는 자신만의 클로저를 가집니다.',
@penguinjs/playground:dev:       '클릭 횟수를 추적하려면 클로저 내부에 변수를 만드세요.',
@penguinjs/playground:dev:       'cleanup 함수에서 removeEventListener를 호출하여 메모리 누수를 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:     difficulty: 'intermediate',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '부분 적용과 커링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:       'function multiply(a, b) {\n' +
@penguinjs/playground:dev:       '  return a * b;\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:       '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 커링\n' +
@penguinjs/playground:dev:       'function curry(fn) {\n' +
@penguinjs/playground:dev:       '  return function curried(...args) {\n' +
@penguinjs/playground:dev:       '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:       'multiplyBy2(5); // 10',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '부분 적용은 함수의 일부 인수를 미리 고정합니다.',
@penguinjs/playground:dev:       'partial 함수에서는 미리 받은 인수와 나중에 받은 인수를 합쳐서 원래 함수를 호출합니다.',
@penguinjs/playground:dev:       '커링은 함수를 한 번에 하나의 인수만 받도록 변환합니다.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Loading levels - advancedLevels: [
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 1,
@penguinjs/playground:dev:     title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:     description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:       '  const cache = {};\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function(...args) {\n' +
@penguinjs/playground:dev:       '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:       "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       "    console.log('Computing...');\n" +
@penguinjs/playground:dev:       '    const result = // ???\n' +
@penguinjs/playground:dev:       '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return result;\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function fibonacci(n) {\n' +
@penguinjs/playground:dev:       '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:       '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:       'memoizedFib(40);',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '인수를 문자열로 변환하여 캐시 키로 사용하세요 (JSON.stringify).',
@penguinjs/playground:dev:       'in 연산자를 사용하여 캐시에 키가 있는지 확인하세요.',
@penguinjs/playground:dev:       '캐시에 값이 없으면 함수를 실행하고 결과를 캐시에 저장하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 2,
@penguinjs/playground:dev:     title: '비동기 클로저',
@penguinjs/playground:dev:     description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:       '  const timers = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:       '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:       '      callback();\n' +
@penguinjs/playground:dev:       '      \n' +
@penguinjs/playground:dev:       '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:       '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:       '      if (index > -1) {\n' +
@penguinjs/playground:dev:       '        // ???\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    }, delay);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timers.push(timerId);\n' +
@penguinjs/playground:dev:       '    return timerId;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:       '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:       '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    });\n' +
@penguinjs/playground:dev:       '    timers.length = 0;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:       '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:       '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'setTimeout의 콜백 함수는 클로저를 통해 외부 변수에 접근할 수 있습니다.',
@penguinjs/playground:dev:       'splice를 사용하여 배열에서 타이머 ID를 제거하세요.',
@penguinjs/playground:dev:       'clearTimeout을 사용하여 타이머를 취소하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 3,
@penguinjs/playground:dev:     title: '팩토리 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:       '  const treasureTypes = {\n' +
@penguinjs/playground:dev:       "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:       "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:       "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:       '  const instances = [];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:       '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:       "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const treasure = {\n' +
@penguinjs/playground:dev:       '      type: type,\n' +
@penguinjs/playground:dev:       '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:       '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:       '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:       '      collected: false,\n' +
@penguinjs/playground:dev:       '      collect: function() {\n' +
@penguinjs/playground:dev:       '        if (!this.collected) {\n' +
@penguinjs/playground:dev:       '          this.collected = true;\n' +
@penguinjs/playground:dev:       '          return // ???\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '        return 0;\n' +
@penguinjs/playground:dev:       '      }\n' +
@penguinjs/playground:dev:       '    };\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    return treasure;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    create: createTreasure,\n' +
@penguinjs/playground:dev:       '    getStats: function() {\n' +
@penguinjs/playground:dev:       '      return {\n' +
@penguinjs/playground:dev:       '        totalCreated: // ???\n' +
@penguinjs/playground:dev:       '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:       '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:       '        }, 0)\n' +
@penguinjs/playground:dev:       '      };\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '총 생성 횟수를 증가시키고 이를 사용하여 고유 ID를 만드세요.',
@penguinjs/playground:dev:       '생성된 보물 인스턴스를 instances 배열에 추가하세요.',
@penguinjs/playground:dev:       'collect 메서드에서 this.value를 반환하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 4,
@penguinjs/playground:dev:     title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:     description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: {
@penguinjs/playground:dev:       character: [Object],
@penguinjs/playground:dev:       items: [Array],
@penguinjs/playground:dev:       obstacles: [Array],
@penguinjs/playground:dev:       grid: [Object]
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:       '  let timeoutId;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:       '    // ???\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }, wait);\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:       '  let inThrottle;\n' +
@penguinjs/playground:dev:       '  let lastFunc;\n' +
@penguinjs/playground:dev:       '  let lastRan;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:       '    const context = this;\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:       '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:       '      func.apply(context, args);\n' +
@penguinjs/playground:dev:       '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '      inThrottle = true;\n' +
@penguinjs/playground:dev:       '    } else {\n' +
@penguinjs/playground:dev:       '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:       '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:       '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:       '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:       '          // ???\n' +
@penguinjs/playground:dev:       '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:       '        }\n' +
@penguinjs/playground:dev:       '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       '디바운싱은 마지막 호출 후 일정 시간이 지나면 함수를 실행합니다.',
@penguinjs/playground:dev:       '쓰로틀링은 일정 시간 간격으로만 함수를 실행합니다.',
@penguinjs/playground:dev:       'apply를 사용하여 원래 컨텍스트를 유지하면서 함수를 호출하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:   },
@penguinjs/playground:dev:   {
@penguinjs/playground:dev:     id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:     difficulty: 'advanced',
@penguinjs/playground:dev:     stageNumber: 5,
@penguinjs/playground:dev:     title: '상태 머신 패턴',
@penguinjs/playground:dev:     description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:     objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:     gameBoard: { character: [Object], items: [Array], grid: [Object] },
@penguinjs/playground:dev:     codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:       '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:       '  const states = config.states;\n' +
@penguinjs/playground:dev:       '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:       '  const history = [currentState];\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  function transition(action) {\n' +
@penguinjs/playground:dev:       '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:       "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:       '      return false;\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    currentState = nextState;\n' +
@penguinjs/playground:dev:       '    history.push(currentState);\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:       '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:       '      // ???\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '    \n' +
@penguinjs/playground:dev:       '    return true;\n' +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '  \n' +
@penguinjs/playground:dev:       '  return {\n' +
@penguinjs/playground:dev:       '    getState: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    transition: transition,\n' +
@penguinjs/playground:dev:       '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    getHistory: function() {\n' +
@penguinjs/playground:dev:       '      return // ???\n' +
@penguinjs/playground:dev:       '    },\n' +
@penguinjs/playground:dev:       '    reset: function() {\n' +
@penguinjs/playground:dev:       '      currentState = config.initial;\n' +
@penguinjs/playground:dev:       '      history.length = 0;\n' +
@penguinjs/playground:dev:       '      history.push(currentState);\n' +
@penguinjs/playground:dev:       '    }\n' +
@penguinjs/playground:dev:       '  };\n' +
@penguinjs/playground:dev:       '}\n' +
@penguinjs/playground:dev:       '\n' +
@penguinjs/playground:dev:       '// 사용 예시\n' +
@penguinjs/playground:dev:       'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:       "  initial: 'red',\n" +
@penguinjs/playground:dev:       '  states: {\n' +
@penguinjs/playground:dev:       "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:       "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:       "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:       '  },\n' +
@penguinjs/playground:dev:       '  transitions: {\n' +
@penguinjs/playground:dev:       "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:       "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:       "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:       '  }\n' +
@penguinjs/playground:dev:       '});',
@penguinjs/playground:dev:     solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:     hints: [
@penguinjs/playground:dev:       'onExit과 onEnter 훅을 호출할 때 클로저가 currentState에 접근합니다.',
@penguinjs/playground:dev:       'canTransition에서는 현재 상태에서 해당 액션으로 전환이 가능한지 확인합니다.',
@penguinjs/playground:dev:       'getHistory에서는 원본 배열의 복사본을 반환하여 변경을 방지하세요.'
@penguinjs/playground:dev:     ],
@penguinjs/playground:dev:     explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:   }
@penguinjs/playground:dev: ]
@penguinjs/playground:dev: Exported allClosureLevels: {
@penguinjs/playground:dev:   beginner: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-1',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '기본 함수 스코프 이해',
@penguinjs/playground:dev:       description: '펭귄이 동굴 입구에서 첫 번째 보물을 발견했어요. 간단한 함수로 보물에 접근해보세요.',
@penguinjs/playground:dev:       objective: '💎 함수 내부에서 보물을 반환하는 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function getTreasure() {\n  // 여기에 코드를 작성하세요\n  \n}\n\nreturn getTreasure;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '함수는 값을 캡슐화하고 반환할 수 있는 기본 단위입니다. 이것이 클로저의 시작점이에요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-2',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '간단한 클로저 만들기',
@penguinjs/playground:dev:       description: '동굴 깊숙한 곳에 숨겨진 보물이 있어요. 외부 변수를 기억하는 함수를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🏆 외부 변수에 접근하는 내부 함수를 반환하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTreasureHunter() {\n' +
@penguinjs/playground:dev:         '  const treasure = "🏆";\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 여기에 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createTreasureHunter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 함수가 선언될 때의 환경을 기억합니다. 내부 함수는 외부 함수의 변수에 접근할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-3',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '외부 변수 접근하기',
@penguinjs/playground:dev:       description: '동굴의 다른 방에서 보물을 찾아야 해요. 매개변수로 받은 값을 기억하는 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔮 매개변수 값을 기억하는 클로저 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createMemory(item) {\n' +
@penguinjs/playground:dev:         '  // 매개변수 item을 기억하는 클로저를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createMemory;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저는 외부 함수의 매개변수도 기억할 수 있습니다. 이를 통해 동적인 값을 캡처할 수 있어요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-4',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '카운터 클로저 구현',
@penguinjs/playground:dev:       description: '동굴에서 찾은 보물의 개수를 세어야 해요. 상태를 유지하는 카운터 클로저를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🎯 호출할 때마다 1씩 증가하는 카운터 함수를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createCounter() {\n' +
@penguinjs/playground:dev:         '  // 카운터 변수와 증가 함수를 만드세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createCounter;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저의 강력한 기능 중 하나는 상태 보존입니다. 외부 함수가 종료되어도 내부 함수는 변수를 계속 기억해요.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-beginner-5',
@penguinjs/playground:dev:       difficulty: 'beginner',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '클로저로 데이터 보호',
@penguinjs/playground:dev:       description: '동굴의 마지막 보물을 안전하게 보관해야 해요. 외부에서 직접 접근할 수 없는 안전한 보관소를 만들어보세요.',
@penguinjs/playground:dev:       objective: '🔒 private 변수를 가진 안전한 보관소를 작성하세요',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createVault(secret) {\n' +
@penguinjs/playground:dev:         '  // private 변수를 만들고 접근 메서드를 반환하세요\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'return createVault;',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '클로저를 사용하면 진짜 private 변수를 만들 수 있습니다. 외부에서는 제공된 메서드로만 접근 가능해요.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   intermediate: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-1',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '렉시컬 스코프 깊이 이해',
@penguinjs/playground:dev:       description: '중첩된 함수에서 렉시컬 스코프가 어떻게 동작하는지 이해하고, 외부 스코프의 변수에 접근하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 보물 💎을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function outer() {\n' +
@penguinjs/playground:dev:         "  const secret = 'hidden';\n" +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function middle() {\n' +
@penguinjs/playground:dev:         '    // 여기서 secret에 접근하세요\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    function inner() {\n' +
@penguinjs/playground:dev:         '      // 여기서도 secret에 접근할 수 있습니다\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return inner();\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return middle();\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'outer();',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '렉시컬 스코프(Lexical Scope)는 함수가 선언된 위치에 따라 변수의 유효 범위가 결정되는 것을 의미합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-2',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '클로저와 반복문',
@penguinjs/playground:dev:       description: '반복문에서 클로저가 어떻게 동작하는지 이해하고, var와 let의 차이를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 숫자 보물을 순서대로 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createFunctions() {\n' +
@penguinjs/playground:dev:         '  const functions = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  for (var i = 0; i < 5; i++) {\n' +
@penguinjs/playground:dev:         '    functions.push(function() {\n' +
@penguinjs/playground:dev:         '      return i;\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return functions;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const funcs = createFunctions();\n' +
@penguinjs/playground:dev:         'funcs[0](); // 5가 반환됩니다. 왜일까요?',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '반복문에서 var를 사용하면 모든 클로저가 같은 변수를 참조하게 됩니다. let이나 IIFE를 사용하여 해결할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-3',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '모듈 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 프라이빗 변수와 퍼블릭 메서드를 가진 모듈을 만드는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 금고의 비밀번호를 관리하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createSafe() {\n' +
@penguinjs/playground:dev:         "  let password = '1234';\n" +
@penguinjs/playground:dev:         '  let locked = true;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    // 비밀번호를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    unlock: function(pass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 잠금 상태를 확인하는 메서드\n' +
@penguinjs/playground:dev:         '    isLocked: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 비밀번호를 변경하는 메서드\n' +
@penguinjs/playground:dev:         '    changePassword: function(oldPass, newPass) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const safe = createSafe();\n' +
@penguinjs/playground:dev:         "safe.unlock('1234');",
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '모듈 패턴은 클로저를 사용하여 프라이빗 변수를 만들고, 퍼블릭 API를 통해서만 접근할 수 있도록 합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-4',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '이벤트 핸들러와 클로저',
@penguinjs/playground:dev:       description: '이벤트 핸들러에서 클로저가 어떻게 사용되는지 이해하고, 메모리 관리를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 버튼을 눌러 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function setupButtons() {\n' +
@penguinjs/playground:dev:         "  const buttons = ['red', 'green', 'blue'];\n" +
@penguinjs/playground:dev:         '  const handlers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  buttons.forEach(function(color, index) {\n' +
@penguinjs/playground:dev:         '    const handler = function() {\n' +
@penguinjs/playground:dev:         "      console.log('Button ' + color + ' clicked!');\n" +
@penguinjs/playground:dev:         '      // 클릭 횟수를 추적하려면?\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    handlers.push(handler);\n' +
@penguinjs/playground:dev:         "    // button.addEventListener('click', handler);\n" +
@penguinjs/playground:dev:         '  });\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 나중에 이벤트를 제거하려면?\n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    handlers: handlers,\n' +
@penguinjs/playground:dev:         '    cleanup: function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '이벤트 핸들러는 클로저를 통해 외부 변수에 접근할 수 있습니다. 메모리 누수를 방지하기 위해 이벤트 리스너를 제거하는 것이 중요합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-intermediate-5',
@penguinjs/playground:dev:       difficulty: 'intermediate',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '부분 적용과 커링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수의 부분 적용과 커링을 구현하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 마법 주문을 조합하여 보물을 얻도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: '// 부분 적용\n' +
@penguinjs/playground:dev:         'function multiply(a, b) {\n' +
@penguinjs/playground:dev:         '  return a * b;\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function partial(fn, ...args) {\n' +
@penguinjs/playground:dev:         '  return function(...remainingArgs) {\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 커링\n' +
@penguinjs/playground:dev:         'function curry(fn) {\n' +
@penguinjs/playground:dev:         '  return function curried(...args) {\n' +
@penguinjs/playground:dev:         '    if (args.length >= fn.length) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      return function(...nextArgs) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const multiplyBy2 = partial(multiply, 2);\n' +
@penguinjs/playground:dev:         'multiplyBy2(5); // 10',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '부분 적용과 커링은 클로저를 활용하여 함수를 더 유연하게 사용할 수 있게 해주는 함수형 프로그래밍 기법입니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ],
@penguinjs/playground:dev:   advanced: [
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-1',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 1,
@penguinjs/playground:dev:       title: '메모이제이션과 캐싱',
@penguinjs/playground:dev:       description: '클로저를 사용하여 함수 결과를 캐싱하고 성능을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 연산 결과를 캐싱하여 빠르게 보물을 찾도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function memoize(fn) {\n' +
@penguinjs/playground:dev:         '  const cache = {};\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function(...args) {\n' +
@penguinjs/playground:dev:         '    const key = // 어떻게 키를 만들까요?\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (/* 캐시에 값이 있나요? */) {\n' +
@penguinjs/playground:dev:         "      console.log('Cache hit!');\n" +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         "    console.log('Computing...');\n" +
@penguinjs/playground:dev:         '    const result = // ???\n' +
@penguinjs/playground:dev:         '    // 결과를 캐시에 저장\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return result;\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function fibonacci(n) {\n' +
@penguinjs/playground:dev:         '  if (n <= 1) return n;\n' +
@penguinjs/playground:dev:         '  return fibonacci(n - 1) + fibonacci(n - 2);\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'const memoizedFib = memoize(fibonacci);\n' +
@penguinjs/playground:dev:         'memoizedFib(40);',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '메모이제이션은 클로저를 사용하여 함수의 결과를 캐싱하고, 같은 인수로 다시 호출될 때 저장된 결과를 반환하여 성능을 향상시킵니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-2',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 2,
@penguinjs/playground:dev:       title: '비동기 클로저',
@penguinjs/playground:dev:       description: '비동기 작업에서 클로저가 어떻게 사용되는지 이해하고, 콜백 함수와의 관계를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 타이머를 설정하고 순차적으로 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createTimerManager() {\n' +
@penguinjs/playground:dev:         '  const timers = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function addTimer(callback, delay) {\n' +
@penguinjs/playground:dev:         '    const timerId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         "      console.log('Timer fired after ' + delay + 'ms');\n" +
@penguinjs/playground:dev:         '      callback();\n' +
@penguinjs/playground:dev:         '      \n' +
@penguinjs/playground:dev:         '      // 타이머를 배열에서 제거\n' +
@penguinjs/playground:dev:         '      const index = timers.indexOf(timerId);\n' +
@penguinjs/playground:dev:         '      if (index > -1) {\n' +
@penguinjs/playground:dev:         '        // ???\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    }, delay);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timers.push(timerId);\n' +
@penguinjs/playground:dev:         '    return timerId;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function clearAllTimers() {\n' +
@penguinjs/playground:dev:         '    // 모든 타이머를 취소\n' +
@penguinjs/playground:dev:         '    timers.forEach(function(timerId) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    });\n' +
@penguinjs/playground:dev:         '    timers.length = 0;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    addTimer: addTimer,\n' +
@penguinjs/playground:dev:         '    clearAll: clearAllTimers,\n' +
@penguinjs/playground:dev:         '    getActiveCount: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '비동기 작업에서 클로저는 콜백 함수가 외부 변수에 접근할 수 있게 해주어, 비동기 작업이 완료된 후에도 상태를 유지할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-3',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 3,
@penguinjs/playground:dev:       title: '팩토리 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 팩토리 패턴을 구현하고, 객체 생성을 최적화하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 다양한 타입의 보물을 생성하여 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function treasureFactory() {\n' +
@penguinjs/playground:dev:         '  const treasureTypes = {\n' +
@penguinjs/playground:dev:         "    gold: { icon: '🪙', value: 100 },\n" +
@penguinjs/playground:dev:         "    diamond: { icon: '💎', value: 500 },\n" +
@penguinjs/playground:dev:         "    emerald: { icon: '💚', value: 300 }\n" +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  let totalCreated = 0;\n' +
@penguinjs/playground:dev:         '  const instances = [];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function createTreasure(type) {\n' +
@penguinjs/playground:dev:         '    if (!treasureTypes[type]) {\n' +
@penguinjs/playground:dev:         "      throw new Error('Unknown treasure type: ' + type);\n" +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const treasure = {\n' +
@penguinjs/playground:dev:         '      type: type,\n' +
@penguinjs/playground:dev:         '      icon: treasureTypes[type].icon,\n' +
@penguinjs/playground:dev:         '      value: treasureTypes[type].value,\n' +
@penguinjs/playground:dev:         '      id: // 고유 ID 생성\n' +
@penguinjs/playground:dev:         '      collected: false,\n' +
@penguinjs/playground:dev:         '      collect: function() {\n' +
@penguinjs/playground:dev:         '        if (!this.collected) {\n' +
@penguinjs/playground:dev:         '          this.collected = true;\n' +
@penguinjs/playground:dev:         '          return // ???\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '        return 0;\n' +
@penguinjs/playground:dev:         '      }\n' +
@penguinjs/playground:dev:         '    };\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    return treasure;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    create: createTreasure,\n' +
@penguinjs/playground:dev:         '    getStats: function() {\n' +
@penguinjs/playground:dev:         '      return {\n' +
@penguinjs/playground:dev:         '        totalCreated: // ???\n' +
@penguinjs/playground:dev:         '        totalValue: instances.reduce(function(sum, treasure) {\n' +
@penguinjs/playground:dev:         '          return sum + (treasure.collected ? treasure.value : 0);\n' +
@penguinjs/playground:dev:         '        }, 0)\n' +
@penguinjs/playground:dev:         '      };\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '팩토리 패턴은 클로저를 사용하여 객체 생성 로직을 캐플슐화하고, 생성된 인스턴스를 추적하며 통계를 관리할 수 있습니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-4',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 4,
@penguinjs/playground:dev:       title: '디바운싱과 쓰로틀링',
@penguinjs/playground:dev:       description: '클로저를 사용하여 디바운싱과 쓰로틀링을 구현하고, 성능 최적화를 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 빠르게 움직이는 플랫폼에서 보물을 수집하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function debounce(func, wait) {\n' +
@penguinjs/playground:dev:         '  let timeoutId;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function debounced(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 이전 타이머를 취소\n' +
@penguinjs/playground:dev:         '    // ???\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    timeoutId = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }, wait);\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         'function throttle(func, limit) {\n' +
@penguinjs/playground:dev:         '  let inThrottle;\n' +
@penguinjs/playground:dev:         '  let lastFunc;\n' +
@penguinjs/playground:dev:         '  let lastRan;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return function throttled(...args) {\n' +
@penguinjs/playground:dev:         '    const context = this;\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!inThrottle) {\n' +
@penguinjs/playground:dev:         '      // 첫 번째 호출은 즉시 실행\n' +
@penguinjs/playground:dev:         '      func.apply(context, args);\n' +
@penguinjs/playground:dev:         '      lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '      inThrottle = true;\n' +
@penguinjs/playground:dev:         '    } else {\n' +
@penguinjs/playground:dev:         '      // 마지막 호출을 저장\n' +
@penguinjs/playground:dev:         '      clearTimeout(lastFunc);\n' +
@penguinjs/playground:dev:         '      lastFunc = setTimeout(function() {\n' +
@penguinjs/playground:dev:         '        if ((Date.now() - lastRan) >= limit) {\n' +
@penguinjs/playground:dev:         '          // ???\n' +
@penguinjs/playground:dev:         '          lastRan = Date.now();\n' +
@penguinjs/playground:dev:         '        }\n' +
@penguinjs/playground:dev:         '      }, limit - (Date.now() - lastRan));\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '디바운싱과 쓰로틀링은 클로저를 사용하여 타이머와 상태를 관리하며, 함수 호출 빈도를 제한하여 성능을 최적화합니다.'
@penguinjs/playground:dev:     },
@penguinjs/playground:dev:     {
@penguinjs/playground:dev:       id: 'closure-cave-advanced-5',
@penguinjs/playground:dev:       difficulty: 'advanced',
@penguinjs/playground:dev:       stageNumber: 5,
@penguinjs/playground:dev:       title: '상태 머신 패턴',
@penguinjs/playground:dev:       description: '클로저를 사용하여 복잡한 상태 머신을 구현하고, 상태 전환을 관리하는 방법을 배웁니다.',
@penguinjs/playground:dev:       objective: '펭귄이 모든 상태를 거쳐 최종 보물을 획득하도록 도와주세요!',
@penguinjs/playground:dev:       gameBoard: [Object],
@penguinjs/playground:dev:       codeTemplate: 'function createStateMachine(config) {\n' +
@penguinjs/playground:dev:         '  let currentState = config.initial;\n' +
@penguinjs/playground:dev:         '  const states = config.states;\n' +
@penguinjs/playground:dev:         '  const transitions = config.transitions;\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  // 상태 전환 기록\n' +
@penguinjs/playground:dev:         '  const history = [currentState];\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  function transition(action) {\n' +
@penguinjs/playground:dev:         '    const currentTransitions = transitions[currentState];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    if (!currentTransitions || !currentTransitions[action]) {\n' +
@penguinjs/playground:dev:         "      console.log('Invalid transition: ' + action + ' from ' + currentState);\n" +
@penguinjs/playground:dev:         '      return false;\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    const nextState = currentTransitions[action];\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 전환 전 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onExit) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    currentState = nextState;\n' +
@penguinjs/playground:dev:         '    history.push(currentState);\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    // 상태 진입 훅\n' +
@penguinjs/playground:dev:         '    if (states[currentState].onEnter) {\n' +
@penguinjs/playground:dev:         '      // ???\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '    \n' +
@penguinjs/playground:dev:         '    return true;\n' +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '  \n' +
@penguinjs/playground:dev:         '  return {\n' +
@penguinjs/playground:dev:         '    getState: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    transition: transition,\n' +
@penguinjs/playground:dev:         '    canTransition: function(action) {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    getHistory: function() {\n' +
@penguinjs/playground:dev:         '      return // ???\n' +
@penguinjs/playground:dev:         '    },\n' +
@penguinjs/playground:dev:         '    reset: function() {\n' +
@penguinjs/playground:dev:         '      currentState = config.initial;\n' +
@penguinjs/playground:dev:         '      history.length = 0;\n' +
@penguinjs/playground:dev:         '      history.push(currentState);\n' +
@penguinjs/playground:dev:         '    }\n' +
@penguinjs/playground:dev:         '  };\n' +
@penguinjs/playground:dev:         '}\n' +
@penguinjs/playground:dev:         '\n' +
@penguinjs/playground:dev:         '// 사용 예시\n' +
@penguinjs/playground:dev:         'const trafficLight = createStateMachine({\n' +
@penguinjs/playground:dev:         "  initial: 'red',\n" +
@penguinjs/playground:dev:         '  states: {\n' +
@penguinjs/playground:dev:         "    red: { onEnter: () => console.log('STOP!') },\n" +
@penguinjs/playground:dev:         "    yellow: { onEnter: () => console.log('CAUTION!') },\n" +
@penguinjs/playground:dev:         "    green: { onEnter: () => console.log('GO!') }\n" +
@penguinjs/playground:dev:         '  },\n' +
@penguinjs/playground:dev:         '  transitions: {\n' +
@penguinjs/playground:dev:         "    red: { next: 'green' },\n" +
@penguinjs/playground:dev:         "    green: { next: 'yellow' },\n" +
@penguinjs/playground:dev:         "    yellow: { next: 'red' }\n" +
@penguinjs/playground:dev:         '  }\n' +
@penguinjs/playground:dev:         '});',
@penguinjs/playground:dev:       solutionValidator: [Function: solutionValidator],
@penguinjs/playground:dev:       hints: [Array],
@penguinjs/playground:dev:       explanation: '상태 머신 패턴은 클로저를 사용하여 현재 상태와 전환 기록을 캐플슐화하고, 복잡한 상태 로직을 관리할 수 있게 해죍니다.'
@penguinjs/playground:dev:     }
@penguinjs/playground:dev:   ]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 200 in 501ms
@penguinjs/playground:dev:  ⨯ Failed to generate static paths for /[locale]:
@penguinjs/playground:dev: Error: Cannot find module './vendor-chunks/@codemirror+view@6.37.2.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array]
@penguinjs/playground:dev: }
@penguinjs/playground:dev: CallStackLibraryGame Props: { searchParams: {}, initialDifficulty: 'beginner', initialStage: 1 }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 200 in 68ms
@penguinjs/playground:dev:  ✓ Compiled /_not-found in 160ms (2267 modules)
@penguinjs/playground:dev:  ⨯ Failed to generate static paths for /[locale]/games/callstack-library:
@penguinjs/playground:dev: Error: Cannot find module './vendor-chunks/@codemirror+view@6.37.2.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array]
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /_next/static/css/app/%5Blocale%5D/layout.css?v=1750721896315 404 in 220ms
@penguinjs/playground:dev:  GET /_next/static/chunks/main-app.js?v=1750721896315 404 in 211ms
@penguinjs/playground:dev:  GET /_next/static/chunks/app-pages-internals.js 404 in 35ms
@penguinjs/playground:dev:  GET /_next/static/chunks/app/%5Blocale%5D/layout.js 404 in 35ms
@penguinjs/playground:dev:  GET /_next/static/chunks/app/%5Blocale%5D/games/callstack-library/page.js 404 in 35ms
@penguinjs/playground:dev:  ⨯ Error: Cannot find module './vendor-chunks/@codemirror+view@6.37.2.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array],
@penguinjs/playground:dev:   page: '/favicon.ico'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 500 in 243ms
@penguinjs/playground:dev:  ⨯ Error: Cannot find module './vendor-chunks/@codemirror+view@6.37.2.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array],
@penguinjs/playground:dev:   page: '/ko/games/callstack-library'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 500 in 527ms
@penguinjs/playground:dev:  ⨯ Error: Cannot find module './vendor-chunks/@codemirror+view@6.37.2.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array],
@penguinjs/playground:dev:   page: '/favicon.ico'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 500 in 245ms
@penguinjs/playground:dev: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection:  [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev: <w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development/3.pack.gz'
@penguinjs/playground:dev: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection:  [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection:  [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/6.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection: [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ unhandledRejection:  [Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'stat',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/15.pack.gz'
@penguinjs/playground:dev: }
@penguinjs/playground:dev: <w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, stat '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/server-development/2.pack.gz'
@penguinjs/playground:dev:  ✓ Compiled /[locale]/games/[gameId] in 390ms (2270 modules)
@penguinjs/playground:dev:  ⨯ [Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'open',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js',
@penguinjs/playground:dev:   page: '/ko/games/callstack-library'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ [Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/pages/_document.js'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'open',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/pages/_document.js'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⚠ Fast Refresh had to perform a full reload due to a runtime error.
@penguinjs/playground:dev:  GET /ko/games/callstack-library 500 in 475ms
@penguinjs/playground:dev:  ⨯ [Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'open',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/games/callstack-library/page.js',
@penguinjs/playground:dev:   page: '/ko/games/callstack-library'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  ⨯ [Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/pages/_document.js'] {
@penguinjs/playground:dev:   errno: -2,
@penguinjs/playground:dev:   code: 'ENOENT',
@penguinjs/playground:dev:   syscall: 'open',
@penguinjs/playground:dev:   path: '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/pages/_document.js'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /ko/games/callstack-library 500 in 1952ms
@penguinjs/playground:dev:  ✓ Compiled /[locale] in 160ms (1144 modules)
@penguinjs/playground:dev:  ⨯ Error: Cannot find module './vendor-chunks/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0.js'
@penguinjs/playground:dev: Require stack:
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/webpack-runtime.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/server/app/[locale]/page.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/require.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/load-components.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/build/utils.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/dev/static-paths-worker.js
@penguinjs/playground:dev: - /Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/jest-worker/processChild.js
@penguinjs/playground:dev:     at __webpack_require__.f.require (.next/server/webpack-runtime.js:198:28)
@penguinjs/playground:dev:     at <unknown> (.next/server/webpack-runtime.js:111:40) {
@penguinjs/playground:dev:   type: 'Error',
@penguinjs/playground:dev:   code: 'MODULE_NOT_FOUND',
@penguinjs/playground:dev:   requireStack: [Array],
@penguinjs/playground:dev:   page: '/favicon.ico'
@penguinjs/playground:dev: }
@penguinjs/playground:dev:  GET /favicon.ico 500 in 515ms
@penguinjs/playground:dev: <w> [webpack.cache.PackFileCacheStrategy] Caching failed for pack: Error: ENOENT: no such file or directory, rename '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development-fallback/0.pack.gz_' -> '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground/.next/cache/webpack/client-development-fallback/0.pack.gz'
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:38 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:38 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:39 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:39 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:40 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/ui:dev: [2J[3J[H오전 8:59:43 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:45 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:45 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:46 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:46 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:47 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:47 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:48 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:48 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:48 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:49 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:50 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:52 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:55 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:55 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:55 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:56 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:56 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:57 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:57 - Found 0 errors. Watching for file changes.
@penguinjs/playground:dev:  ⨯ ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/index.js
@penguinjs/playground:dev: Error: ENOENT: no such file or directory, open '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/index.js'
@penguinjs/playground:dev: 
@penguinjs/playground:dev: Import trace for requested module:
@penguinjs/playground:dev: ../../node_modules/.pnpm/zod@3.25.67/node_modules/zod/dist/esm/index.js
@penguinjs/playground:dev: ../../packages/utils/dist/validation.js
@penguinjs/playground:dev: ../../packages/utils/dist/index.js
@penguinjs/playground:dev: ../../packages/game-engine/dist/executor.js
@penguinjs/playground:dev: ../../packages/game-engine/dist/index.js
@penguinjs/playground:dev: ./src/components/GamePlayer.tsx
@penguinjs/ui:dev: [2J[3J[H오전 8:59:58 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:58 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 9:00:10 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:11 - Found 0 errors. Watching for file changes.
@penguinjs/playground:dev:  ○ Compiling /_not-found ...
@penguinjs/playground:dev:  ⨯ Module not found: Error: Can't resolve 'next/dist/pages/_app' in '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/apps/playground'
@penguinjs/playground:dev:  GET /_next/static/webpack/ee1ba317d96b6fdb.webpack.hot-update.json 500 in 3416ms
@penguinjs/playground:dev:  ⚠ Fast Refresh had to perform a full reload due to a runtime error.
@penguinjs/playground:dev:  GET /ko/games/callstack-library 500 in 14ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/webpack.js 500 in 33ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/main.js 500 in 32ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/pages/_app.js 500 in 31ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/react-refresh.js 500 in 32ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/pages/_error.js 500 in 32ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/webpack.js 500 in 89ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/main.js 500 in 89ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/pages/_app.js 500 in 88ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/react-refresh.js 500 in 89ms
@penguinjs/playground:dev:  GET /_next/static/chunks/fallback/pages/_error.js 500 in 89ms
@penguinjs/playground:dev:  GET /favicon.ico 500 in 110ms
@penguinjs/ui:dev: [2J[3J[H오전 9:00:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:23 - Found 0 errors. Watching for file changes.
@penguinjs/playground:dev:  ✓ Compiled /_not-found in 1507ms (2273 modules)
@penguinjs/playground:dev:  ✓ Compiled in 322ms (2273 modules)
@penguinjs/playground:dev: [?25h
@penguinjs/ui:dev: [2J[3J[H오후 7:23:19 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:20 - Found 2 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:22 - Found 1 error. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:23 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:24 - Found 5 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:24 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:24 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:24 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:25 - Found 8 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:28 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/LanguageToggle.tsx(2,40): error TS7016: Could not find a declaration file for module 'next/navigation'. '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/navigation.js' implicitly has an 'any' type.
@penguinjs/ui:dev:   Try `npm i --save-dev @types/next` if it exists or add a new declaration (.d.ts) file containing `declare module 'next/navigation';`
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:29 - Found 9 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:32 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:32 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:32 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: src/store.ts(1,24): error TS2307: Cannot find module 'zustand' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(2,25): error TS2307: Cannot find module 'zustand/middleware' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(18,6): error TS7006: Parameter 'set' implicitly has an 'any' type.
@penguinjs/game-engine:dev: src/store.ts(18,11): error TS7006: Parameter 'get' implicitly has an 'any' type.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:32 - Found 4 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:33 - Found 1 error. Watching for file changes.
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:33 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:35 - Found 13 errors. Watching for file changes.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.es2020.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.webworker.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.webworker.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:35 - Found 14 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:52 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'node'
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'react'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'react'
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:52 - Found 14 errors. Watching for file changes.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          @penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:38 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:38 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:39 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:39 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:39 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:40 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/ui:dev: [2J[3J[H오전 8:59:41 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:45 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:45 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:46 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:46 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:47 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:48 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:48 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:48 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오전 8:59:49 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오전 8:59:49 - Found 0 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오전 8:59:51 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오전 8:59:51 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:51 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:52 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:55 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:56 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:56 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 8:59:56 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 8:59:56 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 9:00:10 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:11 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오전 9:00:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오전 9:00:23 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:19 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:20 - Found 2 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:22 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 7:23:22 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:22 - Found 0 errors. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:23 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:23 - Found 0 errors. Watching for file changes.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:24 - Found 5 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:24 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:25 - Found 8 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:26 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: src/components/Button.tsx(2,22): error TS2307: Cannot find module '@radix-ui/react-slot' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(3,24): error TS2307: Cannot find module '@uiw/react-codemirror' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(4,28): error TS2307: Cannot find module '@codemirror/lang-javascript' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(5,25): error TS2307: Cannot find module '@codemirror/theme-one-dark' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(6,28): error TS2307: Cannot find module '@codemirror/view' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/CodeEditor.tsx(7,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/components/LanguageToggle.tsx(2,40): error TS7016: Could not find a declaration file for module 'next/navigation'. '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/next@15.3.2_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/navigation.js' implicitly has an 'any' type.
@penguinjs/ui:dev:   Try `npm i --save-dev @types/next` if it exists or add a new declaration (.d.ts) file containing `declare module 'next/navigation';`
@penguinjs/ui:dev: src/components/ThemeToggle.tsx(2,26): error TS2307: Cannot find module 'next-themes' or its corresponding type declarations.
@penguinjs/ui:dev: src/lib/utils.ts(2,25): error TS2307: Cannot find module 'tailwind-merge' or its corresponding type declarations.
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:27 - Found 9 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:31 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: src/validation.ts(5,19): error TS2307: Cannot find module 'zod' or its corresponding type declarations.
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:31 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:32 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: src/store.ts(1,24): error TS2307: Cannot find module 'zustand' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(2,25): error TS2307: Cannot find module 'zustand/middleware' or its corresponding type declarations.
@penguinjs/game-engine:dev: src/store.ts(18,6): error TS7006: Parameter 'set' implicitly has an 'any' type.
@penguinjs/game-engine:dev: src/store.ts(18,11): error TS7006: Parameter 'get' implicitly has an 'any' type.
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:32 - Found 4 errors. Watching for file changes.
@penguinjs/utils:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:33 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:34 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:34 - Found 1 error. Watching for file changes.
@penguinjs/game-engine:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/game-engine:dev: 
@penguinjs/utils:dev: [2J[3J[H오후 7:23:35 - File change detected. Starting incremental compilation...
@penguinjs/utils:dev: 
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/utils:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/utils:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Entry point for implicit type library 'node'
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/utils:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/utils:dev:   The file is in the program because:
@penguinjs/utils:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/utils:dev: 
@penguinjs/utils:dev: 오후 7:23:35 - Found 13 errors. Watching for file changes.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/game-engine:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/game-engine:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Entry point for implicit type library 'node'
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2020.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.es2020.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.webworker.d.ts' not found.
@penguinjs/game-engine:dev:   The file is in the program because:
@penguinjs/game-engine:dev:     Library 'lib.webworker.d.ts' specified in compilerOptions
@penguinjs/game-engine:dev: 
@penguinjs/game-engine:dev: 오후 7:23:35 - Found 14 errors. Watching for file changes.
@penguinjs/ui:dev: [2J[3J[H오후 7:23:53 - File change detected. Starting incremental compilation...
@penguinjs/ui:dev: 
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Array'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Boolean'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'CallableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Function'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'IArguments'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'NewableFunction'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Number'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'Object'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'RegExp'.
@penguinjs/ui:dev: error TS2318: Cannot find global type 'String'.
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'node'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'node'
@penguinjs/ui:dev: error TS2688: Cannot find type definition file for 'react'.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Entry point for implicit type library 'react'
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.dom.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.dom.d.ts' specified in compilerOptions
@penguinjs/ui:dev: error TS6053: File '/Users/mzc01-swlee/dev/repository/github/claude-code/js-game-project/penguinjs/node_modules/.pnpm/typescript@5.8.3/node_modules/typescript/lib/lib.es2022.d.ts' not found.
@penguinjs/ui:dev:   The file is in the program because:
@penguinjs/ui:dev:     Library 'lib.es2022.d.ts' specified in compilerOptions
@penguinjs/ui:dev: 
@penguinjs/ui:dev: 오후 7:23:53 - Found 14 errors. Watching for file changes.
